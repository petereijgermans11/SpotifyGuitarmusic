{"ast":null,"code":"import axios from 'axios';\nconst SPOTIFY_BASE_URL = 'https://api.spotify.com/v1';\nconst CLIENT_ID = \"aa8f7326ca5b4e3d82f69335808fa61e\";\nconst REDIRECT_URI = \"http://127.0.0.1:3000\";\nexport const spotifyApi = {\n  token: null,\n  setAccessToken(token) {\n    this.token = token;\n    axios.defaults.headers.common['Authorization'] = `Bearer ${token}`;\n  },\n  getHeaders() {\n    return {\n      'Authorization': `Bearer ${this.token}`,\n      'Content-Type': 'application/json'\n    };\n  },\n  async getAccessToken(code) {\n    try {\n      const response = await axios.post('https://accounts.spotify.com/api/token', null, {\n        params: {\n          grant_type: 'authorization_code',\n          code,\n          redirect_uri: REDIRECT_URI,\n          client_id: CLIENT_ID\n        },\n        headers: {\n          'Content-Type': 'application/x-www-form-urlencoded'\n        }\n      });\n      return response.data.access_token;\n    } catch (error) {\n      console.error('Error getting access token:', error);\n      throw error;\n    }\n  },\n  async search(query, types = ['track', 'artist', 'album']) {\n    try {\n      const response = await axios.get(`${SPOTIFY_BASE_URL}/search`, {\n        headers: this.getHeaders(),\n        params: {\n          q: query,\n          type: types.join(','),\n          limit: 20\n        }\n      });\n      return response.data;\n    } catch (error) {\n      console.error('Error searching:', error);\n      throw error;\n    }\n  },\n  async getUserPlaylists() {\n    try {\n      const response = await axios.get(`${SPOTIFY_BASE_URL}/me/playlists`, {\n        headers: this.getHeaders()\n      });\n      return response.data;\n    } catch (error) {\n      console.error('Error getting playlists:', error);\n      throw error;\n    }\n  },\n  async getPlaylist(playlistId) {\n    try {\n      const response = await axios.get(`${SPOTIFY_BASE_URL}/playlists/${playlistId}`, {\n        headers: this.getHeaders()\n      });\n      return response.data;\n    } catch (error) {\n      console.error('Error getting playlist:', error);\n      throw error;\n    }\n  },\n  async play(uri) {\n    try {\n      // First get available devices\n      const devices = await this.getDevices();\n      if (!devices.devices.length) {\n        throw new Error('No available devices found. Please open Spotify on any device.');\n      }\n\n      // Use the first available device\n      const deviceId = devices.devices[0].id;\n      await axios.put(`${SPOTIFY_BASE_URL}/me/player/play?device_id=${deviceId}`, {\n        uris: [uri]\n      }, {\n        headers: this.getHeaders()\n      });\n    } catch (error) {\n      console.error('Error playing track:', error);\n      throw error;\n    }\n  },\n  async pause() {\n    try {\n      await axios.put(`${SPOTIFY_BASE_URL}/me/player/pause`, {}, {\n        headers: this.getHeaders()\n      });\n    } catch (error) {\n      console.error('Error pausing track:', error);\n      throw error;\n    }\n  },\n  async getDevices() {\n    try {\n      const response = await axios.get(`${SPOTIFY_BASE_URL}/me/player/devices`, {\n        headers: this.getHeaders()\n      });\n      return response.data;\n    } catch (error) {\n      console.error('Error getting devices:', error);\n      throw error;\n    }\n  },\n  async getArtistTopTracks(artistId) {\n    try {\n      const response = await axios.get(`${SPOTIFY_BASE_URL}/artists/${artistId}/top-tracks?market=NL`, {\n        headers: this.getHeaders()\n      });\n      return response.data;\n    } catch (error) {\n      console.error('Error getting artist top tracks:', error);\n      throw error;\n    }\n  },\n  handleError(error) {\n    var _error$response;\n    if (((_error$response = error.response) === null || _error$response === void 0 ? void 0 : _error$response.status) === 401) {\n      window.localStorage.removeItem(\"token\");\n      window.location.href = '/';\n    }\n  }\n};","map":{"version":3,"names":["axios","SPOTIFY_BASE_URL","CLIENT_ID","REDIRECT_URI","spotifyApi","token","setAccessToken","defaults","headers","common","getHeaders","getAccessToken","code","response","post","params","grant_type","redirect_uri","client_id","data","access_token","error","console","search","query","types","get","q","type","join","limit","getUserPlaylists","getPlaylist","playlistId","play","uri","devices","getDevices","length","Error","deviceId","id","put","uris","pause","getArtistTopTracks","artistId","handleError","_error$response","status","window","localStorage","removeItem","location","href"],"sources":["/Users/petereijgermans/Desktop/react/src/services/spotify.js"],"sourcesContent":["import axios from 'axios';\n\nconst SPOTIFY_BASE_URL = 'https://api.spotify.com/v1';\nconst CLIENT_ID = \"aa8f7326ca5b4e3d82f69335808fa61e\";\nconst REDIRECT_URI = \"http://127.0.0.1:3000\";\n\nexport const spotifyApi = {\n  token: null,\n\n  setAccessToken(token) {\n    this.token = token;\n    axios.defaults.headers.common['Authorization'] = `Bearer ${token}`;\n  },\n\n  getHeaders() {\n    return {\n      'Authorization': `Bearer ${this.token}`,\n      'Content-Type': 'application/json',\n    };\n  },\n\n  async getAccessToken(code) {\n    try {\n      const response = await axios.post('https://accounts.spotify.com/api/token', null, {\n        params: {\n          grant_type: 'authorization_code',\n          code,\n          redirect_uri: REDIRECT_URI,\n          client_id: CLIENT_ID\n        },\n        headers: {\n          'Content-Type': 'application/x-www-form-urlencoded'\n        }\n      });\n      return response.data.access_token;\n    } catch (error) {\n      console.error('Error getting access token:', error);\n      throw error;\n    }\n  },\n\n  async search(query, types = ['track', 'artist', 'album']) {\n    try {\n      const response = await axios.get(`${SPOTIFY_BASE_URL}/search`, {\n        headers: this.getHeaders(),\n        params: {\n          q: query,\n          type: types.join(','),\n          limit: 20\n        }\n      });\n      return response.data;\n    } catch (error) {\n      console.error('Error searching:', error);\n      throw error;\n    }\n  },\n\n  async getUserPlaylists() {\n    try {\n      const response = await axios.get(`${SPOTIFY_BASE_URL}/me/playlists`, {\n        headers: this.getHeaders()\n      });\n      return response.data;\n    } catch (error) {\n      console.error('Error getting playlists:', error);\n      throw error;\n    }\n  },\n\n  async getPlaylist(playlistId) {\n    try {\n      const response = await axios.get(`${SPOTIFY_BASE_URL}/playlists/${playlistId}`, {\n        headers: this.getHeaders()\n      });\n      return response.data;\n    } catch (error) {\n      console.error('Error getting playlist:', error);\n      throw error;\n    }\n  },\n\n  async play(uri) {\n    try {\n      // First get available devices\n      const devices = await this.getDevices();\n      if (!devices.devices.length) {\n        throw new Error('No available devices found. Please open Spotify on any device.');\n      }\n\n      // Use the first available device\n      const deviceId = devices.devices[0].id;\n\n      await axios.put(`${SPOTIFY_BASE_URL}/me/player/play?device_id=${deviceId}`, {\n        uris: [uri]\n      }, {\n        headers: this.getHeaders()\n      });\n    } catch (error) {\n      console.error('Error playing track:', error);\n      throw error;\n    }\n  },\n\n  async pause() {\n    try {\n      await axios.put(`${SPOTIFY_BASE_URL}/me/player/pause`, {}, {\n        headers: this.getHeaders()\n      });\n    } catch (error) {\n      console.error('Error pausing track:', error);\n      throw error;\n    }\n  },\n\n  async getDevices() {\n    try {\n      const response = await axios.get(`${SPOTIFY_BASE_URL}/me/player/devices`, {\n        headers: this.getHeaders()\n      });\n      return response.data;\n    } catch (error) {\n      console.error('Error getting devices:', error);\n      throw error;\n    }\n  },\n\n  async getArtistTopTracks(artistId) {\n    try {\n      const response = await axios.get(\n        `${SPOTIFY_BASE_URL}/artists/${artistId}/top-tracks?market=NL`,\n        {\n          headers: this.getHeaders()\n        }\n      );\n      return response.data;\n    } catch (error) {\n      console.error('Error getting artist top tracks:', error);\n      throw error;\n    }\n  },\n\n  handleError(error) {\n    if (error.response?.status === 401) {\n      window.localStorage.removeItem(\"token\");\n      window.location.href = '/';\n    }\n  }\n}; "],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}