{"ast":null,"code":"var _jsxFileName = \"/Users/petereijgermans/Desktop/react/src/components/MainView.js\",\n  _s = $RefreshSig$();\nimport React, { useState, useEffect } from 'react';\nimport { Box, Typography, TextField, Grid, Card, CardContent, CardMedia, IconButton, Select, MenuItem, FormControl, InputLabel, Button } from '@mui/material';\nimport { PlayArrow, Pause } from '@mui/icons-material';\nimport { spotifyApi } from '../services/spotify';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nfunction MainView({\n  onTrackSelect\n}) {\n  _s();\n  const [searchQuery, setSearchQuery] = useState('');\n  const [searchResults, setSearchResults] = useState([]);\n  const [playlists, setPlaylists] = useState([]);\n  const [playlistTracks, setPlaylistTracks] = useState([]);\n  const [currentTrack, setCurrentTrack] = useState(null);\n  const [isPlaying, setIsPlaying] = useState(false);\n  const [searchType, setSearchType] = useState('artist');\n  useEffect(() => {\n    loadPlaylists();\n    // Initial search for guitar players\n    handleSearch(null, 'Al Di Meola');\n  }, []);\n  const loadPlaylists = async () => {\n    try {\n      const data = await spotifyApi.getUserPlaylists();\n      setPlaylists(data.items);\n    } catch (error) {\n      console.error('Error loading playlists:', error);\n    }\n  };\n  const loadPlaylistTracks = async playlistId => {\n    try {\n      const response = await spotifyApi.getPlaylist(playlistId);\n      setPlaylistTracks(response.tracks.items.map(item => item.track));\n    } catch (error) {\n      console.error('Error loading playlist tracks:', error);\n    }\n  };\n  const handleSearch = async (e, initialQuery = '') => {\n    if (e) e.preventDefault();\n    const queryToUse = initialQuery || searchQuery;\n    try {\n      let data;\n      if (searchType === 'artist') {\n        // Search for the artist first\n        data = await spotifyApi.search(queryToUse, ['artist']);\n        if (data.artists.items.length > 0) {\n          // Get top tracks of the first artist found\n          const artistId = data.artists.items[0].id;\n          const topTracks = await spotifyApi.getArtistTopTracks(artistId);\n          setSearchResults(topTracks.tracks);\n        }\n      } else {\n        // Regular track search\n        data = await spotifyApi.search(queryToUse, ['track']);\n        setSearchResults(data.tracks.items);\n      }\n    } catch (error) {\n      console.error('Error searching:', error);\n    }\n  };\n  const handlePlay = async track => {\n    try {\n      if ((currentTrack === null || currentTrack === void 0 ? void 0 : currentTrack.id) === track.id && isPlaying) {\n        await spotifyApi.pause();\n        setIsPlaying(false);\n      } else {\n        await spotifyApi.play(track.uri);\n        setCurrentTrack(track);\n        setIsPlaying(true);\n        onTrackSelect(track);\n      }\n    } catch (error) {\n      console.error('Error playing track:', error);\n      alert('Please make sure you have an active Spotify device open (like Spotify desktop app) and a Premium account');\n    }\n  };\n  const handlePlaylistClick = async playlist => {\n    await loadPlaylistTracks(playlist.id);\n  };\n\n  // Quick search buttons for famous guitarists\n  const guitarists = ['Al Di Meola', 'Scott Henderson', 'Pat Metheny', 'John McLaughlin', 'Allan Holdsworth', 'Joe Satriani', 'Lee Ritenour', 'Steve Vai', 'John Petrucci', 'Steve Morse', 'Yngwie Malmsteen', 'Steve Lukather', 'Steve Morse'];\n  return /*#__PURE__*/_jsxDEV(Box, {\n    sx: {\n      padding: '2rem',\n      color: 'white'\n    },\n    children: [/*#__PURE__*/_jsxDEV(\"form\", {\n      onSubmit: handleSearch,\n      children: /*#__PURE__*/_jsxDEV(Box, {\n        sx: {\n          display: 'flex',\n          gap: 2,\n          marginBottom: '2rem'\n        },\n        children: [/*#__PURE__*/_jsxDEV(FormControl, {\n          sx: {\n            minWidth: 120\n          },\n          children: [/*#__PURE__*/_jsxDEV(InputLabel, {\n            sx: {\n              color: 'white'\n            },\n            children: \"Search Type\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 107,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(Select, {\n            value: searchType,\n            onChange: e => setSearchType(e.target.value),\n            sx: {\n              color: 'white',\n              '& .MuiOutlinedInput-notchedOutline': {\n                borderColor: 'white'\n              }\n            },\n            children: [/*#__PURE__*/_jsxDEV(MenuItem, {\n              value: \"artist\",\n              children: \"Artist\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 113,\n              columnNumber: 15\n            }, this), /*#__PURE__*/_jsxDEV(MenuItem, {\n              value: \"track\",\n              children: \"Track\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 114,\n              columnNumber: 15\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 108,\n            columnNumber: 13\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 106,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(TextField, {\n          fullWidth: true,\n          value: searchQuery,\n          onChange: e => setSearchQuery(e.target.value),\n          placeholder: \"Search for guitarists or tracks\",\n          sx: {\n            '& .MuiInputBase-input': {\n              color: 'white'\n            },\n            '& .MuiOutlinedInput-root': {\n              '& fieldset': {\n                borderColor: 'rgba(255, 255, 255, 0.3)'\n              },\n              '&:hover fieldset': {\n                borderColor: 'rgba(255, 255, 255, 0.5)'\n              }\n            }\n          }\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 117,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 105,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 104,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(Box, {\n      sx: {\n        marginBottom: '2rem'\n      },\n      children: [/*#__PURE__*/_jsxDEV(Typography, {\n        variant: \"h6\",\n        sx: {\n          marginBottom: '1rem'\n        },\n        children: \"Famous Guitarists\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 141,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(Box, {\n        sx: {\n          display: 'flex',\n          gap: 1,\n          flexWrap: 'wrap'\n        },\n        children: guitarists.map(guitarist => /*#__PURE__*/_jsxDEV(Button, {\n          variant: \"outlined\",\n          sx: {\n            color: 'white',\n            borderColor: 'white',\n            '&:hover': {\n              borderColor: '#1db954',\n              color: '#1db954'\n            }\n          },\n          onClick: () => {\n            setSearchQuery(guitarist);\n            handleSearch(null, guitarist);\n          },\n          children: guitarist\n        }, guitarist, false, {\n          fileName: _jsxFileName,\n          lineNumber: 146,\n          columnNumber: 13\n        }, this))\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 144,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 140,\n      columnNumber: 7\n    }, this), searchResults.length > 0 && /*#__PURE__*/_jsxDEV(Box, {\n      sx: {\n        marginBottom: '2rem'\n      },\n      children: [/*#__PURE__*/_jsxDEV(Typography, {\n        variant: \"h5\",\n        sx: {\n          marginBottom: '1rem'\n        },\n        children: \"Search Results\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 171,\n        columnNumber: 11\n      }, this), /*#__PURE__*/_jsxDEV(Grid, {\n        container: true,\n        spacing: 2,\n        children: searchResults.map(track => {\n          var _track$album$images$;\n          return /*#__PURE__*/_jsxDEV(Grid, {\n            item: true,\n            xs: 12,\n            sm: 6,\n            md: 4,\n            children: /*#__PURE__*/_jsxDEV(Card, {\n              sx: {\n                display: 'flex',\n                bgcolor: 'rgba(0, 0, 0, 0.5)'\n              },\n              children: [/*#__PURE__*/_jsxDEV(CardMedia, {\n                component: \"img\",\n                sx: {\n                  width: 100\n                },\n                image: (_track$album$images$ = track.album.images[0]) === null || _track$album$images$ === void 0 ? void 0 : _track$album$images$.url,\n                alt: track.name\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 178,\n                columnNumber: 19\n              }, this), /*#__PURE__*/_jsxDEV(CardContent, {\n                sx: {\n                  flex: '1',\n                  color: 'white'\n                },\n                children: [/*#__PURE__*/_jsxDEV(Typography, {\n                  variant: \"subtitle1\",\n                  children: track.name\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 185,\n                  columnNumber: 21\n                }, this), /*#__PURE__*/_jsxDEV(Typography, {\n                  variant: \"body2\",\n                  children: track.artists[0].name\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 186,\n                  columnNumber: 21\n                }, this), /*#__PURE__*/_jsxDEV(IconButton, {\n                  onClick: () => handlePlay(track),\n                  sx: {\n                    color: 'white'\n                  },\n                  children: (currentTrack === null || currentTrack === void 0 ? void 0 : currentTrack.id) === track.id && isPlaying ? /*#__PURE__*/_jsxDEV(Pause, {}, void 0, false, {\n                    fileName: _jsxFileName,\n                    lineNumber: 191,\n                    columnNumber: 69\n                  }, this) : /*#__PURE__*/_jsxDEV(PlayArrow, {}, void 0, false, {\n                    fileName: _jsxFileName,\n                    lineNumber: 191,\n                    columnNumber: 81\n                  }, this)\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 187,\n                  columnNumber: 21\n                }, this)]\n              }, void 0, true, {\n                fileName: _jsxFileName,\n                lineNumber: 184,\n                columnNumber: 19\n              }, this)]\n            }, void 0, true, {\n              fileName: _jsxFileName,\n              lineNumber: 177,\n              columnNumber: 17\n            }, this)\n          }, track.id, false, {\n            fileName: _jsxFileName,\n            lineNumber: 176,\n            columnNumber: 15\n          }, this);\n        })\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 174,\n        columnNumber: 11\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 170,\n      columnNumber: 9\n    }, this), /*#__PURE__*/_jsxDEV(Box, {\n      sx: {\n        marginBottom: '2rem'\n      },\n      children: [/*#__PURE__*/_jsxDEV(Typography, {\n        variant: \"h5\",\n        sx: {\n          marginBottom: '1rem'\n        },\n        children: \"Tracks\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 203,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(Grid, {\n        container: true,\n        spacing: 2,\n        children: playlistTracks.map(track => {\n          var _track$album$images$2;\n          return /*#__PURE__*/_jsxDEV(Grid, {\n            item: true,\n            xs: 12,\n            sm: 6,\n            md: 4,\n            children: /*#__PURE__*/_jsxDEV(Card, {\n              sx: {\n                display: 'flex',\n                bgcolor: 'rgba(0, 0, 0, 0.5)'\n              },\n              children: [/*#__PURE__*/_jsxDEV(CardMedia, {\n                component: \"img\",\n                sx: {\n                  width: 100\n                },\n                image: (_track$album$images$2 = track.album.images[0]) === null || _track$album$images$2 === void 0 ? void 0 : _track$album$images$2.url,\n                alt: track.name\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 210,\n                columnNumber: 17\n              }, this), /*#__PURE__*/_jsxDEV(CardContent, {\n                sx: {\n                  flex: '1',\n                  color: 'white'\n                },\n                children: [/*#__PURE__*/_jsxDEV(Typography, {\n                  variant: \"subtitle1\",\n                  children: track.name\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 217,\n                  columnNumber: 19\n                }, this), /*#__PURE__*/_jsxDEV(Typography, {\n                  variant: \"body2\",\n                  children: track.artists[0].name\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 218,\n                  columnNumber: 19\n                }, this), /*#__PURE__*/_jsxDEV(IconButton, {\n                  onClick: () => handlePlay(track),\n                  sx: {\n                    color: 'white'\n                  },\n                  children: (currentTrack === null || currentTrack === void 0 ? void 0 : currentTrack.id) === track.id && isPlaying ? /*#__PURE__*/_jsxDEV(Pause, {}, void 0, false, {\n                    fileName: _jsxFileName,\n                    lineNumber: 223,\n                    columnNumber: 67\n                  }, this) : /*#__PURE__*/_jsxDEV(PlayArrow, {}, void 0, false, {\n                    fileName: _jsxFileName,\n                    lineNumber: 223,\n                    columnNumber: 79\n                  }, this)\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 219,\n                  columnNumber: 19\n                }, this)]\n              }, void 0, true, {\n                fileName: _jsxFileName,\n                lineNumber: 216,\n                columnNumber: 17\n              }, this)]\n            }, void 0, true, {\n              fileName: _jsxFileName,\n              lineNumber: 209,\n              columnNumber: 15\n            }, this)\n          }, track.id, false, {\n            fileName: _jsxFileName,\n            lineNumber: 208,\n            columnNumber: 13\n          }, this);\n        })\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 206,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 202,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(Box, {\n      children: [/*#__PURE__*/_jsxDEV(Typography, {\n        variant: \"h5\",\n        sx: {\n          marginBottom: '1rem'\n        },\n        children: \"Your Playlists\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 234,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(Grid, {\n        container: true,\n        spacing: 2,\n        children: playlists.map(playlist => {\n          var _playlist$images$;\n          return /*#__PURE__*/_jsxDEV(Grid, {\n            item: true,\n            xs: 12,\n            sm: 6,\n            md: 4,\n            children: /*#__PURE__*/_jsxDEV(Card, {\n              sx: {\n                bgcolor: 'rgba(0, 0, 0, 0.5)',\n                cursor: 'pointer',\n                '&:hover': {\n                  bgcolor: 'rgba(0, 0, 0, 0.7)'\n                }\n              },\n              onClick: () => handlePlaylistClick(playlist),\n              children: [/*#__PURE__*/_jsxDEV(CardMedia, {\n                component: \"img\",\n                height: \"160\",\n                image: (_playlist$images$ = playlist.images[0]) === null || _playlist$images$ === void 0 ? void 0 : _playlist$images$.url,\n                alt: playlist.name\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 250,\n                columnNumber: 17\n              }, this), /*#__PURE__*/_jsxDEV(CardContent, {\n                sx: {\n                  color: 'white'\n                },\n                children: [/*#__PURE__*/_jsxDEV(Typography, {\n                  variant: \"subtitle1\",\n                  children: playlist.name\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 257,\n                  columnNumber: 19\n                }, this), /*#__PURE__*/_jsxDEV(Typography, {\n                  variant: \"body2\",\n                  children: [playlist.tracks.total, \" tracks\"]\n                }, void 0, true, {\n                  fileName: _jsxFileName,\n                  lineNumber: 258,\n                  columnNumber: 19\n                }, this)]\n              }, void 0, true, {\n                fileName: _jsxFileName,\n                lineNumber: 256,\n                columnNumber: 17\n              }, this)]\n            }, void 0, true, {\n              fileName: _jsxFileName,\n              lineNumber: 240,\n              columnNumber: 15\n            }, this)\n          }, playlist.id, false, {\n            fileName: _jsxFileName,\n            lineNumber: 239,\n            columnNumber: 13\n          }, this);\n        })\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 237,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 233,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 103,\n    columnNumber: 5\n  }, this);\n}\n_s(MainView, \"DwYMKKzQoL5tHNyQ/pSAS8jP1eg=\");\n_c = MainView;\nexport default MainView;\nvar _c;\n$RefreshReg$(_c, \"MainView\");","map":{"version":3,"names":["React","useState","useEffect","Box","Typography","TextField","Grid","Card","CardContent","CardMedia","IconButton","Select","MenuItem","FormControl","InputLabel","Button","PlayArrow","Pause","spotifyApi","jsxDEV","_jsxDEV","MainView","onTrackSelect","_s","searchQuery","setSearchQuery","searchResults","setSearchResults","playlists","setPlaylists","playlistTracks","setPlaylistTracks","currentTrack","setCurrentTrack","isPlaying","setIsPlaying","searchType","setSearchType","loadPlaylists","handleSearch","data","getUserPlaylists","items","error","console","loadPlaylistTracks","playlistId","response","getPlaylist","tracks","map","item","track","e","initialQuery","preventDefault","queryToUse","search","artists","length","artistId","id","topTracks","getArtistTopTracks","handlePlay","pause","play","uri","alert","handlePlaylistClick","playlist","guitarists","sx","padding","color","children","onSubmit","display","gap","marginBottom","minWidth","fileName","_jsxFileName","lineNumber","columnNumber","value","onChange","target","borderColor","fullWidth","placeholder","variant","flexWrap","guitarist","onClick","container","spacing","_track$album$images$","xs","sm","md","bgcolor","component","width","image","album","images","url","alt","name","flex","_track$album$images$2","_playlist$images$","cursor","height","total","_c","$RefreshReg$"],"sources":["/Users/petereijgermans/Desktop/react/src/components/MainView.js"],"sourcesContent":["import React, { useState, useEffect } from 'react';\nimport { Box, Typography, TextField, Grid, Card, CardContent, CardMedia, IconButton, Select, MenuItem, FormControl, InputLabel, Button } from '@mui/material';\nimport { PlayArrow, Pause } from '@mui/icons-material';\nimport { spotifyApi } from '../services/spotify';\n\nfunction MainView({ onTrackSelect }) {\n  const [searchQuery, setSearchQuery] = useState('');\n  const [searchResults, setSearchResults] = useState([]);\n  const [playlists, setPlaylists] = useState([]);\n  const [playlistTracks, setPlaylistTracks] = useState([]);\n  const [currentTrack, setCurrentTrack] = useState(null);\n  const [isPlaying, setIsPlaying] = useState(false);\n  const [searchType, setSearchType] = useState('artist');\n\n  useEffect(() => {\n    loadPlaylists();\n    // Initial search for guitar players\n    handleSearch(null, 'Al Di Meola');\n  }, []);\n\n  const loadPlaylists = async () => {\n    try {\n      const data = await spotifyApi.getUserPlaylists();\n      setPlaylists(data.items);\n    } catch (error) {\n      console.error('Error loading playlists:', error);\n    }\n  };\n\n  const loadPlaylistTracks = async (playlistId) => {\n    try {\n      const response = await spotifyApi.getPlaylist(playlistId);\n      setPlaylistTracks(response.tracks.items.map(item => item.track));\n    } catch (error) {\n      console.error('Error loading playlist tracks:', error);\n    }\n  };\n\n  const handleSearch = async (e, initialQuery = '') => {\n    if (e) e.preventDefault();\n    const queryToUse = initialQuery || searchQuery;\n    \n    try {\n      let data;\n      if (searchType === 'artist') {\n        // Search for the artist first\n        data = await spotifyApi.search(queryToUse, ['artist']);\n        if (data.artists.items.length > 0) {\n          // Get top tracks of the first artist found\n          const artistId = data.artists.items[0].id;\n          const topTracks = await spotifyApi.getArtistTopTracks(artistId);\n          setSearchResults(topTracks.tracks);\n        }\n      } else {\n        // Regular track search\n        data = await spotifyApi.search(queryToUse, ['track']);\n        setSearchResults(data.tracks.items);\n      }\n    } catch (error) {\n      console.error('Error searching:', error);\n    }\n  };\n\n  const handlePlay = async (track) => {\n    try {\n      if (currentTrack?.id === track.id && isPlaying) {\n        await spotifyApi.pause();\n        setIsPlaying(false);\n      } else {\n        await spotifyApi.play(track.uri);\n        setCurrentTrack(track);\n        setIsPlaying(true);\n        onTrackSelect(track);\n      }\n    } catch (error) {\n      console.error('Error playing track:', error);\n      alert('Please make sure you have an active Spotify device open (like Spotify desktop app) and a Premium account');\n    }\n  };\n\n  const handlePlaylistClick = async (playlist) => {\n    await loadPlaylistTracks(playlist.id);\n  };\n\n  // Quick search buttons for famous guitarists\n  const guitarists = [\n    'Al Di Meola',\n    'Scott Henderson',\n    'Pat Metheny',\n    'John McLaughlin',\n    'Allan Holdsworth',\n    'Joe Satriani',\n    'Lee Ritenour',\n    'Steve Vai',\n    'John Petrucci',\n    'Steve Morse',\n    'Yngwie Malmsteen',\n    'Steve Lukather',\n    'Steve Morse',\n  ];\n\n  return (\n    <Box sx={{ padding: '2rem', color: 'white' }}>\n      <form onSubmit={handleSearch}>\n        <Box sx={{ display: 'flex', gap: 2, marginBottom: '2rem' }}>\n          <FormControl sx={{ minWidth: 120 }}>\n            <InputLabel sx={{ color: 'white' }}>Search Type</InputLabel>\n            <Select\n              value={searchType}\n              onChange={(e) => setSearchType(e.target.value)}\n              sx={{ color: 'white', '& .MuiOutlinedInput-notchedOutline': { borderColor: 'white' } }}\n            >\n              <MenuItem value=\"artist\">Artist</MenuItem>\n              <MenuItem value=\"track\">Track</MenuItem>\n            </Select>\n          </FormControl>\n          <TextField\n            fullWidth\n            value={searchQuery}\n            onChange={(e) => setSearchQuery(e.target.value)}\n            placeholder=\"Search for guitarists or tracks\"\n            sx={{\n              '& .MuiInputBase-input': {\n                color: 'white',\n              },\n              '& .MuiOutlinedInput-root': {\n                '& fieldset': {\n                  borderColor: 'rgba(255, 255, 255, 0.3)',\n                },\n                '&:hover fieldset': {\n                  borderColor: 'rgba(255, 255, 255, 0.5)',\n                },\n              },\n            }}\n          />\n        </Box>\n      </form>\n\n      {/* Quick Search Buttons */}\n      <Box sx={{ marginBottom: '2rem' }}>\n        <Typography variant=\"h6\" sx={{ marginBottom: '1rem' }}>\n          Famous Guitarists\n        </Typography>\n        <Box sx={{ display: 'flex', gap: 1, flexWrap: 'wrap' }}>\n          {guitarists.map((guitarist) => (\n            <Button\n              key={guitarist}\n              variant=\"outlined\"\n              sx={{ \n                color: 'white', \n                borderColor: 'white',\n                '&:hover': { \n                  borderColor: '#1db954',\n                  color: '#1db954'\n                }\n              }}\n              onClick={() => {\n                setSearchQuery(guitarist);\n                handleSearch(null, guitarist);\n              }}\n            >\n              {guitarist}\n            </Button>\n          ))}\n        </Box>\n      </Box>\n\n      {/* Search Results */}\n      {searchResults.length > 0 && (\n        <Box sx={{ marginBottom: '2rem' }}>\n          <Typography variant=\"h5\" sx={{ marginBottom: '1rem' }}>\n            Search Results\n          </Typography>\n          <Grid container spacing={2}>\n            {searchResults.map((track) => (\n              <Grid item xs={12} sm={6} md={4} key={track.id}>\n                <Card sx={{ display: 'flex', bgcolor: 'rgba(0, 0, 0, 0.5)' }}>\n                  <CardMedia\n                    component=\"img\"\n                    sx={{ width: 100 }}\n                    image={track.album.images[0]?.url}\n                    alt={track.name}\n                  />\n                  <CardContent sx={{ flex: '1', color: 'white' }}>\n                    <Typography variant=\"subtitle1\">{track.name}</Typography>\n                    <Typography variant=\"body2\">{track.artists[0].name}</Typography>\n                    <IconButton\n                      onClick={() => handlePlay(track)}\n                      sx={{ color: 'white' }}\n                    >\n                      {currentTrack?.id === track.id && isPlaying ? <Pause /> : <PlayArrow />}\n                    </IconButton>\n                  </CardContent>\n                </Card>\n              </Grid>\n            ))}\n          </Grid>\n        </Box>\n      )}\n\n      {/* Playlist Tracks */}\n      <Box sx={{ marginBottom: '2rem' }}>\n        <Typography variant=\"h5\" sx={{ marginBottom: '1rem' }}>\n          Tracks\n        </Typography>\n        <Grid container spacing={2}>\n          {playlistTracks.map((track) => (\n            <Grid item xs={12} sm={6} md={4} key={track.id}>\n              <Card sx={{ display: 'flex', bgcolor: 'rgba(0, 0, 0, 0.5)' }}>\n                <CardMedia\n                  component=\"img\"\n                  sx={{ width: 100 }}\n                  image={track.album.images[0]?.url}\n                  alt={track.name}\n                />\n                <CardContent sx={{ flex: '1', color: 'white' }}>\n                  <Typography variant=\"subtitle1\">{track.name}</Typography>\n                  <Typography variant=\"body2\">{track.artists[0].name}</Typography>\n                  <IconButton\n                    onClick={() => handlePlay(track)}\n                    sx={{ color: 'white' }}\n                  >\n                    {currentTrack?.id === track.id && isPlaying ? <Pause /> : <PlayArrow />}\n                  </IconButton>\n                </CardContent>\n              </Card>\n            </Grid>\n          ))}\n        </Grid>\n      </Box>\n\n      {/* Playlists */}\n      <Box>\n        <Typography variant=\"h5\" sx={{ marginBottom: '1rem' }}>\n          Your Playlists\n        </Typography>\n        <Grid container spacing={2}>\n          {playlists.map((playlist) => (\n            <Grid item xs={12} sm={6} md={4} key={playlist.id}>\n              <Card \n                sx={{ \n                  bgcolor: 'rgba(0, 0, 0, 0.5)',\n                  cursor: 'pointer',\n                  '&:hover': {\n                    bgcolor: 'rgba(0, 0, 0, 0.7)',\n                  }\n                }}\n                onClick={() => handlePlaylistClick(playlist)}\n              >\n                <CardMedia\n                  component=\"img\"\n                  height=\"160\"\n                  image={playlist.images[0]?.url}\n                  alt={playlist.name}\n                />\n                <CardContent sx={{ color: 'white' }}>\n                  <Typography variant=\"subtitle1\">{playlist.name}</Typography>\n                  <Typography variant=\"body2\">{playlist.tracks.total} tracks</Typography>\n                </CardContent>\n              </Card>\n            </Grid>\n          ))}\n        </Grid>\n      </Box>\n    </Box>\n  );\n}\n\nexport default MainView; "],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}